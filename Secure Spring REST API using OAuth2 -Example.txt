What is OAuth2
OAuth2 is an standardized authorization protocol/framework. As per Official OAuth2 Specification:

The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.


Spring Security OAuth project provides all the necessary API we might need in order to develop an OAuth2 compliant implementation using Spring. 

Official Spring security oauth project provides a comprehensive example for implementing OAuth2. 

The code samples of this post is inspired by that examples itself. 

The intention of this post is to just use bare-minimum functionality required in order to secure our REST API, nothing more.

four key concepts in OAuth2:

1. OAuth2 Roles
	OAuth2 defines four roles:

	resource owner:
	Could be you. An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.
	resource server:
	The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.
	client:
	An application making protected resource requests on behalf of the resource owner and with its authorization. It could be a mobile app asking your permission to access your Facebook feeds, a REST client trying to access REST API, a web site [Stackoverflow e.g.] providing an alternative login option using Facebook account.
	authorization server:
	The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.

2. OAuth2 Authorization Grant types
	An authorization grant is a credential representing the resource owner’s authorization (to access its protected resources) used by the client to obtain an access token. The specification defines four grant types:

	authorization code
	implicit
	resource owner password credentials
	client credentials

	We will be using resource owner password credentials grant type. The reason is simple, we are not implementing a view which redirects us to a login page. Only the usage where a client [Postman or RestTemplate based Java client e.g.] have the Resource owner’s credentials and they provide those credential [along with client credentials] to authorization server in order to eventually receive the access-token[and optionally refresh token], and then use that token to actually access the resources.

	A common example is the GMail app [a client] on your smartphone which takes your credentials and use them to connect to GMail servers. It also shows that ‘Password Credentials Grant’ is best suited when both the client and the servers are from same company as the trust is there, you don’t want to provide your credentials to a third party.

3. OAuth2 Tokens
	Tokens are implementation specific random strings, generated by the authorization server and are issued when the client requests them.

	Access Token : Sent with each request, usually valid for a very short life time [an hour e.g.]
	Refresh Token : Mainly used to get a new access token, not sent with each request, usually lives longer than access token.	
		
4. OAuth2 Access Token Scope
	Client can ask for the resource with specific access rights using scope [want to access feeds & photos of this users facebook account], and authorization server in turn return scope showing what access rights were actually granted to the client [Resource owner only allowed feeds access, no photos e.g.].		
	
	
To implement OAuth using Spring Security, in order to access our REST resources.

1. Resource Server	
2. Authorization Server	
3. Security Configuration	
4. Endpoints and their purpose


	Attempt to access resources [REST API] without any authorization [will fail of-course].
	GET http://localhost:8080/SpringSecurityOAuth2Example/user/
	
	Ask for tokens[access+refresh] using HTTP POST on /oauth/token, with grant_type=password,and resource owners credentials as req-params. Additionally, send client credentials in Authorization header.
	POST http://localhost:8080/SpringSecurityOAuth2Example/oauth/token?grant_type=password&username=bill&password=abc123
	
	Ask for a new access token via valid refresh-token, using HTTP POST on /oauth/token, with grant_type=refresh_token,and sending actual refresh token. Additionally, send client credentials in Authorization header.
	POST http://localhost:8080/SpringSecurityOAuth2Example/oauth/token?grant_type=refresh_token&refresh_token=094b7d23-973f-4cc1-83ad-8ffd43de1845
	
	Access the resource by providing an access token using access_token query param with request.
	GET http://localhost:8080/SpringSecurityOAuth2Example/user/?access_token=3525d0e4-d881-49e7-9f91-bcfd18259109

5. Rest API
6. Running the application
7. Test

Client 1: Postman
	Try to access a resource without any auth info, wil get a 401.
	Let’s get the tokens. First add an authorization header with client credentials [my-trusted-client/secret].
	Click on update request, verify the header in header-tab.
	Send the Post request, you should receive the response containing access-token as well as refresh-token.
	Save these tokens somewhere, you will need them. Now you can use this access-token [valid for 2 minutes] to access resources.
	After 2 minutes, access-token gets expired, your further resource requests will fail.
	We need a new access-token. Fire a post to with refresh-token to get a brand-new access-token.
	Use this new access-token to access the resources.
	Refresh-token expires too[10 minutes]. After that, you should see your refresh request getting failed.
	It means you need to request a new refresh+access-token, as in step 2.
	
Client 2: RestTemplate based java application	


http://localhost:5509/SpringSecurityOAuth2Example/user/

